Index: app/main/service/auth_helper.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/main/service/auth_helper.py b/app/main/service/auth_helper.py
new file mode 100644
--- /dev/null	(date 1657294577686)
+++ b/app/main/service/auth_helper.py	(date 1657294577686)
@@ -0,0 +1,91 @@
+from app.main.model.user import User
+from typing import Dict, Tuple
+
+
+class Auth:
+
+    @staticmethod
+    def login_user(data: Dict[str, str]) -> Tuple[Dict[str, str], int]:
+        try:
+            # fetch the user data
+            user = User.query.filter_by(email=data.get('email')).first()
+            if user and user.check_password(data.get('password')):
+                auth_token = User.encode_auth_token(user.id)
+                if auth_token:
+                    response_object = {
+                        'status': 'success',
+                        'message': 'Successfully logged in.',
+                        'Authorization': auth_token.decode()
+                    }
+                    return response_object, 200
+            else:
+                response_object = {
+                    'status': 'fail',
+                    'message': 'email or password does not match.'
+                }
+                return response_object, 401
+
+        except Exception as e:
+            print(e)
+            response_object = {
+                'status': 'fail',
+                'message': 'Try again'
+            }
+            return response_object, 500
+
+    @staticmethod
+    def logout_user(data: str) -> Tuple[Dict[str, str], int]:
+        if data:
+            auth_token = data.split(" ")[1]
+        else:
+            auth_token = ''
+        if auth_token:
+            resp = User.decode_auth_token(auth_token)
+            if not isinstance(resp, str):
+                # mark the token as blacklisted
+                return {
+                    'status': 'success',
+                    'message': 'Successfully logged out.'
+                    }, 200
+            else:
+                response_object = {
+                    'status': 'fail',
+                    'message': resp
+                }
+                return response_object, 401
+        else:
+            response_object = {
+                'status': 'fail',
+                'message': 'Provide a valid auth token.'
+            }
+            return response_object, 403
+
+    @staticmethod
+    def get_logged_in_user(new_request):
+        # get the auth token
+        auth_token = new_request.headers.get('Authorization')
+        if auth_token:
+            resp = User.decode_auth_token(auth_token)
+            if not isinstance(resp, str):
+                user = User.query.filter_by(id=resp).first()
+                response_object = {
+                    'status': 'success',
+                    'data': {
+                        'user_id': user.id,
+                        'email': user.email,
+                        'admin': user.admin,
+                        'registered_on': str(user.registered_on)
+                    }
+                }
+                return response_object, 200
+            response_object = {
+                'status': 'fail',
+                'message': resp
+            }
+            return response_object, 401
+        else:
+            response_object = {
+                'status': 'fail',
+                'message': 'Provide a valid auth token.'
+            }
+            return response_object, 401
\ No newline at end of file
Index: app/main/service/user_service.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/main/service/user_service.py b/app/main/service/user_service.py
new file mode 100644
--- /dev/null	(date 1657294661225)
+++ b/app/main/service/user_service.py	(date 1657294661225)
@@ -0,0 +1,57 @@
+import uuid
+import datetime
+
+from app.main import db
+from app.main.model.user import User
+from typing import Dict, Tuple
+
+
+def save_new_user(data: Dict[str, str]) -> Tuple[Dict[str, str], int]:
+    user = User.query.filter_by(email=data['email']).first()
+    if not user:
+        new_user = User(
+            public_id=str(uuid.uuid4()),
+            email=data['email'],
+            username=data['username'],
+            password=data['password'],
+            registered_on=datetime.datetime.utcnow()
+        )
+        save_changes(new_user)
+        return generate_token(new_user)
+    else:
+        response_object = {
+            'status': 'fail',
+            'message': 'User already exists. Please Log in.',
+        }
+        return response_object, 409
+
+
+def get_all_users():
+    return User.query.all()
+
+
+def get_a_user(public_id):
+    return User.query.filter_by(public_id=public_id).first()
+
+
+def generate_token(user: User) -> Tuple[Dict[str, str], int]:
+    try:
+        # generate the auth token
+        auth_token = User.encode_auth_token(user.id)
+        response_object = {
+            'status': 'success',
+            'message': 'Successfully registered.',
+            'Authorization': auth_token.decode()
+        }
+        return response_object, 201
+    except Exception as e:
+        response_object = {
+            'status': 'fail',
+            'message': 'Some error occurred. Please try again.'
+        }
+        return response_object, 401
+
+
+def save_changes(data: User) -> None:
+    db.session.add(data)
+    db.session.commit()
\ No newline at end of file
Index: app/main/controller/auth_controller.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/main/controller/auth_controller.py b/app/main/controller/auth_controller.py
new file mode 100644
--- /dev/null	(date 1657296168149)
+++ b/app/main/controller/auth_controller.py	(date 1657296168149)
@@ -0,0 +1,34 @@
+from flask import request
+from flask_restx import Resource
+
+from app.main.model.user import AuthDto
+from app.main.service.auth_helper import Auth
+from typing import Dict, Tuple
+
+api = AuthDto.api
+user_auth = AuthDto.user_auth
+
+
+@api.route('/login')
+class UserLogin(Resource):
+    """
+        User Login Resource
+    """
+    @api.doc('user login')
+    @api.expect(user_auth, validate=True)
+    def post(self) -> Tuple[Dict[str, str], int]:
+        # get the post data
+        post_data = request.json
+        return Auth.login_user(data=post_data)
+
+
+@api.route('/logout')
+class LogoutAPI(Resource):
+    """
+    Logout Resource
+    """
+    @api.doc('logout a user')
+    def post(self) -> Tuple[Dict[str, str], int]:
+        # get auth token
+        auth_header = request.headers.get('Authorization')
+        return Auth.logout_user(data=auth_header)
\ No newline at end of file
Index: app/main/controller/user_controller.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/main/controller/user_controller.py b/app/main/controller/user_controller.py
new file mode 100644
--- /dev/null	(date 1657296872734)
+++ b/app/main/controller/user_controller.py	(date 1657296872734)
@@ -0,0 +1,43 @@
+from flask import request
+from flask_restx import Resource
+
+from app.main.util.decorator import admin_token_required, token_required
+from ..model.user import UserDto
+from ..service.user_service import save_new_user, get_all_users, get_a_user
+from typing import Dict, Tuple
+
+api = UserDto.api
+_user = UserDto.user
+
+
+@api.route('/')
+class UserList(Resource):
+    @api.doc('list_of_registered_users')
+    @token_required
+    @api.marshal_list_with(_user, envelope='data')
+    def get(self):
+        """List all registered users"""
+        return get_all_users()
+
+    @api.expect(_user, validate=True)
+    @api.response(201, 'User successfully created.')
+    @api.doc('create a new user')
+    def post(self) -> Tuple[Dict[str, str], int]:
+        """Creates a new User """
+        data = request.json
+        return save_new_user(data=data)
+
+
+@api.route('/<public_id>')
+@api.param('public_id', 'The User identifier')
+@api.response(404, 'User not found.')
+class User(Resource):
+    @api.doc('get a user')
+    @api.marshal_with(_user)
+    def get(self, public_id):
+        """get a user given its identifier"""
+        user = get_a_user(public_id)
+        if not user:
+            api.abort(404)
+        else:
+            return user
Index: app/main/util/decorator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/main/util/decorator.py b/app/main/util/decorator.py
new file mode 100644
--- /dev/null	(date 1657295419277)
+++ b/app/main/util/decorator.py	(date 1657295419277)
@@ -0,0 +1,44 @@
+from functools import wraps
+
+from flask import request
+
+from app.main.service.auth_helper import Auth
+from typing import Callable
+
+
+def token_required(f) -> Callable:
+    @wraps(f)
+    def decorated(*args, **kwargs):
+
+        data, status = Auth.get_logged_in_user(request)
+        token = data.get('data')
+
+        if not token:
+            return data, status
+
+        return f(*args, **kwargs)
+
+    return decorated
+
+
+def admin_token_required(f: Callable) -> Callable:
+    @wraps(f)
+    def decorated(*args, **kwargs):
+
+        data, status = Auth.get_logged_in_user(request)
+        token = data.get('data')
+
+        if not token:
+            return data, status
+
+        admin = token.get('admin')
+        if not admin:
+            response_object = {
+                'status': 'fail',
+                'message': 'admin token required'
+            }
+            return response_object, 401
+
+        return f(*args, **kwargs)
+
+    return decorated
\ No newline at end of file
Index: app/main/model/user.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/main/model/user.py b/app/main/model/user.py
new file mode 100644
--- /dev/null	(date 1657297042248)
+++ b/app/main/model/user.py	(date 1657297042248)
@@ -0,0 +1,94 @@
+
+from .. import db, flask_bcrypt
+import datetime
+from ..config import key
+import jwt
+from typing import Union
+
+
+class User(db.Model):
+    """ User Model for storing user related details """
+    __tablename__ = "user"
+
+    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
+    email = db.Column(db.String(255), unique=True, nullable=False)
+    registered_on = db.Column(db.DateTime, nullable=False)
+    admin = db.Column(db.Boolean, nullable=False, default=False)
+    public_id = db.Column(db.String(100), unique=True)
+    username = db.Column(db.String(50), unique=True)
+    password_hash = db.Column(db.String(100))
+
+    @property
+    def password(self):
+        raise AttributeError('password: write-only field')
+
+    @password.setter
+    def password(self, password):
+        self.password_hash = flask_bcrypt.generate_password_hash(password).decode('utf-8')
+
+    def check_password(self, password: str) -> bool:
+        return flask_bcrypt.check_password_hash(self.password_hash, password)
+
+    @staticmethod
+    def encode_auth_token(user_id: int) -> bytes:
+        """
+        Generates the Auth Token
+        :return: string
+        """
+        try:
+            payload = {
+                'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1, seconds=5),
+                'iat': datetime.datetime.utcnow(),
+                'sub': user_id
+            }
+            return jwt.encode(
+                payload,
+                key,
+                algorithm='HS256'
+            )
+        except Exception as e:
+            return e
+
+    @staticmethod
+    def decode_auth_token(auth_token: str) -> Union[str, int]:
+        """
+        Decodes the auth token
+        :param auth_token:
+        :return: integer|string
+        """
+        try:
+            payload = jwt.decode(auth_token, key)
+            is_blacklisted_token = False
+            if is_blacklisted_token:
+                return 'Token blacklisted. Please log in again.'
+            else:
+                return payload['sub']
+        except jwt.ExpiredSignatureError:
+            return 'Signature expired. Please log in again.'
+        except jwt.InvalidTokenError:
+            return 'Invalid token. Please log in again.'
+
+    def __repr__(self):
+        return "<User '{}'>".format(self.username)
+
+
+
+from flask_restx import Namespace, fields
+
+
+class UserDto:
+    api = Namespace('user', description='user related operations')
+    user = api.model('user', {
+        'email': fields.String(required=True, description='user email address'),
+        'username': fields.String(required=True, description='user username'),
+        'password': fields.String(required=True, description='user password'),
+        'public_id': fields.String(description='user Identifier')
+    })
+
+
+class AuthDto:
+    api = Namespace('auth', description='authentication related operations')
+    user_auth = api.model('auth_details', {
+        'email': fields.String(required=True, description='The email address'),
+        'password': fields.String(required=True, description='The user password '),
+    })
\ No newline at end of file
